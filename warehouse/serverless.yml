service: warehouse-service-v3

useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${env:STAGE}
  environment:
    DYNAMODB_TABLE_INVENTORY: !Ref InventoryTable
    DYNAMODB_TABLE_PURCHASES: !Ref PurchasesTable
    # SQS_RESPONSE_QUEUE: !Ref IngredientsResponseQueue
    # SQS_REQUEST_QUEUE: !Ref IngredientsRequestQueue
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - ${cf:free-launch-api-monorepo-dev.RequestQueueArn}
            - ${cf:free-launch-api-monorepo-dev.ResponseQueueArn}

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt InventoryTable.Arn
            - !GetAtt PurchasesTable.Arn

  apiGateway:
    restApiId: ${cf:free-launch-api-monorepo-dev.ApiGatewayRestApiId}
    restApiRootResourceId: ${cf:free-launch-api-monorepo-dev.ApiGatewayRootResourceId}

functions:
  sqsListener:
    handler: src/lambda.sqsHandler
    events:
      - sqs:
          arn: ${cf:free-launch-api-monorepo-dev.RequestQueueArn}
          batchSize: 1

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-monorepo
resources:
  - ${file(../aws-resources/gateway-response.yml)}
