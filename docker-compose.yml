version: '3.8'
services:
  postgres:
    image: postgres
    container_name: postgres_db
    environment:
      POSTGRES_USER: kitchen
      POSTGRES_PASSWORD: kitchen
      POSTGRES_DB: kitchen

    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kitchen -d kitchen"]
      interval: 5s
      timeout: 5s
      retries: 5

  localstack:
    image: localstack/localstack:latest
    container_name: localstack_service
    environment:
      SERVICES: dynamodb,sqs
      EDGE_PORT: 4566
      AWS_DEFAULT_REGION: ${AWS_REGION:-us-east-1}
      DEBUG: 1
      DOCKER_HOST: unix:///var/run/docker.sock
      DATA_DIR: /tmp/localstack/data
      TMPDIR: /tmp/localstack/tmp
      DYNAMODB_INVENTORY_TABLE: inventory
      DYNAMODB_PURCHASES_TABLE: purchases
    ports:
      - "4566:4566"
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - ./localstack/init:/docker-entrypoint-initaws.d
      - "/var/run/docker.sock:/var/run/docker.sock"
    healthcheck:
      test: ["CMD-SHELL", "awslocal dynamodb list-tables || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  kitchen:
    build:
      context: ./kitchen
      dockerfile: Dockerfile
    container_name: kitchen_service
    ports:
      - "3011:3000"
    env_file:
      - .env
      - ./kitchen/.env
    environment:
      AWS_ENDPOINT: "http://localstack:4566"
      STAGE: ${STAGE:-dev}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      DB_HOST: postgres_db
    depends_on:
      - postgres
      - localstack
    command: ["node", "dist/main.js"]

  warehouse:
    build:
      context: ./warehouse
      dockerfile: Dockerfile
    image: warehouse-service:latest
    container_name: warehouse_service
    ports:
      - "3022:3000"
    env_file:
      - .env
      - ./warehouse/.env
    environment:
      AWS_ENDPOINT: "http://localstack:4566"
      STAGE: ${STAGE:-dev}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      DYNAMODB_INVENTORY_TABLE: inventory
      DYNAMODB_PURCHASES_TABLE: purchases
    depends_on:
      localstack:
        condition: service_healthy
    command: ["node", "dist/main.js"]

volumes:
  postgres_data:
  localstack_data:

